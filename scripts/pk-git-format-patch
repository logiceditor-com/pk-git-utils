#!/usr/bin/python
import sys
import os
from urlparse import urlsplit
from subprocess import Popen, PIPE
from email import message_from_file

args = sys.argv[1:]

# --help passed to git-format-patch and it's ok for us
if len(args) == 0:
    print "This tool mangle subject line in patches to conform our guidelines"
    print
    print "Refer to manual page on git-format-patch for options, because all"
    print "of them will be passed to git-format-patch"
    sys.exit(0)

def run_pipe(cmd):
    pipe = Popen(cmd, stdout=PIPE)
    stdout, stderr = pipe.communicate()
    if pipe.returncode == 0:
        return stdout.strip()
    sys.stderr.write("run " + repr(cmd) + " failed\n")
    sys.exit(pipe.returncode)

origin = run_pipe(["git", "config", "--get", "remote.origin.url"])
if origin.startswith("http"):
    split = urlsplit(origin)
    origin = os.path.basename(split.path)
else:
    if origin.startswith("git@github"):
        origin = origin.rsplit(":")[1]
    elif origin.startswith("gitolite@git"):
        origin = origin.rsplit(":")[1]
        base = os.path.basename(origin)
        if base == "client" or base == "server":
            origin = os.path.join(
                os.path.basename(
                    os.path.dirname(origin)),
                    base)

branch = run_pipe(["git", "symbolic-ref", "HEAD"])
if branch.startswith("refs/heads/"):
    branch = branch[len("refs/heads/"):]

info = " | %(origin)s | %(branch)s" % locals()


def enchance_subject(patchfile):
    newname = patchfile + ".new"
    oldfile = open(patchfile, 'r')
    newfile = open(newname, "w")
    msg = message_from_file(oldfile)
    msg.replace_header("Subject",  msg["Subject"] + info)
    newfile.write(msg.as_string())
    oldfile.close()
    newfile.close()
    os.unlink(patchfile)
    os.rename(newname, patchfile)


files = run_pipe(["git", "format-patch"] + args)
for each in files.split("\n"):
    enchance_subject(each)
    print each  # print filenames to stdout, as original format-patch
